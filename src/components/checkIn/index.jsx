import React from 'react'
import c from './checkin.module.scss'
import { Icons } from '../../assets/icons'
import { Components } from '..'
import { API } from '../../api'

const CheckIn = () => {
  const [ active, setActive ] = React.useState(false)
  const [ type, setType ] = React.useState('')
  const [ lateTime, setLateTime ] = React.useState(0)
  const [ time, setTime ] = React.useState('')
  const [lateMinutes, setLateMinutes] = React.useState(0);
  const [ attendance, setAttendance ] = React.useState(false)

  const user = JSON.parse(localStorage.getItem('user'))
  const token = localStorage.getItem('token')


  React.useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
  
      // üéØ —Ä–∞–∑–±–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
      const [workHour, workMinute] = user["–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã"].split(':').map(Number);
      const planned = new Date();
      planned.setHours(workHour);
      planned.setMinutes(workMinute);
      planned.setSeconds(0);
  
      const lateMs = now - planned;
      const isLate = lateMs > 0;
  
      if (isLate) {
        const minutes = Math.floor(lateMs / 60000);
        setLateMinutes(minutes);
      } else {
        setLateMinutes(0);
      }
    }, 1000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  
    return () => clearInterval(interval);
  }, [user]);
  

  const workLat = 42.867051;
  const workLng = 74.589865;

  // const workLat = 40.53633557888629; 
  // const workLng = 72.8339069223278; 


  function getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const toRad = (x) => x * Math.PI / 180;

    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);

    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
  }

  const attendanceId = localStorage.getItem('attendanceId')
  const comeTime = localStorage.getItem('comeTime')


  async function handleCheckIn() {
    try {
      navigator.geolocation.getCurrentPosition(
        async (pos) => {
          const { latitude, longitude } = pos.coords;
          const distance = getDistanceFromLatLonInMeters(latitude, longitude, workLat, workLng);
          const now = new Date();
  
          const [workHour, workMinute] = user["–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã"].split(':').map(Number);
          const plannedTime = new Date(now);
          plannedTime.setHours(workHour, workMinute, 0, 0);
  
          const lateMs = now - plannedTime;
          const lateMinutes = lateMs > 0 ? Math.floor(lateMs / 60000) : 0;
  
          const formattedTime = now.toTimeString().slice(0, 8);
          const formattedDate = now.toISOString().split('T')[0];
  
          const isLeaving = Boolean(attendance); // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ ‚Äî —É—Ö–æ–¥
  
          const data = {
            —Ä–∞–±–æ—Ç–Ω–∏–∫: user.id,
            –¥–∞—Ç–∞: formattedDate,
            –≤—Ä–µ–º—è_–ø—Ä–∏—Ö–æ–¥–∞: isLeaving ? comeTime : formattedTime,
            –≤—Ä–µ–º—è_—É—Ö–æ–¥–∞: isLeaving ? formattedTime : undefined,
            –æ–ø–æ–∑–¥–∞–Ω–∏–µ_–≤_–º–∏–Ω—É—Ç–∞—Ö: lateMinutes
          };
  
          if (distance > 50) {
            setType('workplace');
          } else {
            console.log("‚úÖ –í—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", distance.toFixed(1), "–º");
  
            if (lateMinutes > 0) {
              setType('late');
              setLateTime(lateMinutes);
              setTime(formattedTime);
            }
          }
  
          if (!isLeaving) {
            await API.postAttendance(token, data).then(res => {
              localStorage.setItem('comeTime', res.data['–≤—Ä–µ–º—è_–ø—Ä–∏—Ö–æ–¥–∞']);
              localStorage.setItem('attendanceId', res.data.id);
              setType('win');
            });
          } else {
            await API.putAttendance(attendanceId, data).then(res => {
              localStorage.removeItem('attendanceId');
              localStorage.removeItem('comeTime');
            })
            setType('leave');
          }
  
          setActive(true);
        },
        async (err) => {
          console.error("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", err);
          alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø.");
  
          try {
            const res = await navigator.permissions.query({ name: 'geolocation' });
            console.log("–°—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", res.state);
            if (res.state === 'denied') {
              alert('–í—ã —Ä–∞–Ω–µ–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –†–∞–∑—Ä–µ—à–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
            }
          } catch (permErr) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", permErr);
          }
        }
      );
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è:', e.response?.data || e.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏—Ö–æ–¥–∞.');
    }
  }
  
  
  React.useEffect(() => {
    API.getAttendance()
      .then(res => {
        console.log(res.data);
        const isCome = res.data.find(item => item['—Ä–∞–±–æ—Ç–Ω–∏–∫'] === user.id && item['–¥–∞—Ç–∞'] === new Date().toISOString().split('T')[0])
        if(isCome){
          setAttendance(true)
        } else {
          setAttendance(false)
        }
        
      })
  }, [active])


  return (
    <div className={c.checkIn}>
      <div className={c.header}>
        <h3>{`${user["–∏–º—è"]} ${user["—Ñ–∞–º–∏–ª–∏—è"]}`}</h3>
        <p>{user["–¥–æ–ª–∂–Ω–æ—Å—Ç—å"]}</p>
      </div>
      <div className={c.check}>
        <div>
          <h1>{user["–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã"]}</h1>
          {lateMinutes > 0 && !attendanceId ? (
            <p>
              –í—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ!
            </p>
          ) : attendanceId ? (
            <p style={{ color: '#98CA02' }}>
              –í—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ
            </p> 
          ): null}
        </div>
        <button>
          <img src={Icons.check} alt="" />
          <p onClick={handleCheckIn}>
            {attendanceId ? '–£–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã' : '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è'}
          </p>
        </button>
      </div>

      {
        active && <Components.Alert type={type} lateTime={lateTime} time={time} setActive={setActive} />
      }
    </div>
  )
}


// –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã gps
// –∑–≤–æ–Ω–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
// –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ



export default CheckIn